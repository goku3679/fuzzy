# -*- coding: utf-8 -*-
"""Fuzzy & ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19c1xa4XITBDZSgQozs8cIV9JZX4z1Qno
"""

pip install fuzzywuzzy

pip install levenshtein

import Levenshtein as lev

Str1 = "Good Morning"

Str2 = "Good Morning"

Distance = lev.distance(Str1.lower(),Str2.lower()),

print(Distance)

import Levenshtein as lev

Str1 = "Good"

Str2 = "Good Morning"

Distance = lev.distance(Str1.lower(),Str2.lower()),

print(Distance)

import Levenshtein as lev

Str1 = "Cat"

Str2 = "Dog"


Distance = lev.distance(Str1.lower(),Str2.lower()),

print(Distance)

import Levenshtein as lev

Str1 = "Movie"

Str2 = "Rajini"


Distance = lev.distance(Str1.lower(),Str2.lower()),

print(Distance)

import Levenshtein as lev

Str1 = "Good "

Str2 = "Hi Good Morning"


Distance = lev.distance(Str1.lower(),Str2.lower()),

print(Distance)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "Good Morning"

s2 = "hi good morning"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "I am  bala"

s2 = "My name is bala"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "Cat"

s2 = "dog"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "Cat"

s2 = "taC"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "I want mobile"

s2 = "Samsung"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "I want mobile"

s2 = "Nokia"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "I want mobile"

s2 = "mobile"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "movie"

s2 = "Super Star"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = 4

s2 = 4


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process


s1 = "11113"

s2 = "4"


b=fuzz.WRatio(s1, s2)

print (("\nFuzzy WRatio: "), b)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process

A = input("Enter your value = ")

B = ['runs','score','total']

C = fuzz.WRatio(A,B)
print("\n Ratio =",C)

from fuzzywuzzy import fuzz

from fuzzywuzzy import process

A = input("Enter your value = ")

B = ['marks','result','grade']

C = fuzz.WRatio(A,B)
print("\n Ratio =",C)

import pandas as pd
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

def overall():
  A = pd.read_excel("mark.xlsx")
  print(A)
  return A
def math():
  A = pd.read_excel("mark.xlsx")
  B = A[["Name"]].to_numpy().flatten()
  C= A[["Math"]].to_numpy().flatten()
  Frame = {"Name":B,"Math":C}
  D = pd.DataFrame(Frame)
  print(D)
  return D

def bio():
  A = pd.read_excel("mark.xlsx")
  B = A[["Name"]].to_numpy().flatten()
  C= A[["Bio"]].to_numpy().flatten()
  Frame = {"Name":B,"Bio":C}
  D = pd.DataFrame(Frame)
  print(D)
  return D

def phy():
  A = pd.read_excel("mark.xlsx")
  B = A[["Name"]].to_numpy().flatten()
  C= A[["Phy"]].to_numpy().flatten()
  Frame = {"Name":B,"Phy":C}
  D = pd.DataFrame(Frame)
  print(D)
  return D

def che():
  A = pd.read_excel("mark.xlsx")
  B = A[["Name"]].to_numpy().flatten()
  C= A[["Che"]].to_numpy().flatten()
  Frame = {"Name":B,"Che":C}
  D = pd.DataFrame(Frame)
  print(D)
  return D

def eng():
  A = pd.read_excel("mark.xlsx")
  B = A[["Name"]].to_numpy().flatten()
  C= A[["Eng"]].to_numpy().flatten()
  Frame = {"Name":B,"Eng":C}
  D = pd.DataFrame(Frame)
  print(D)
  return D

def tamil():
  A = pd.read_excel("mark.xlsx")
  B = A[["Name"]].to_numpy().flatten()
  C= A[["Tamil"]].to_numpy().flatten()
  Frame = {"Name":B,"Tamil":C}
  D = pd.DataFrame(Frame)
  print(D)
  return D

s1 = input("Enter your input =")
s2 = "overall"
s3= "Tamil"
s4="English"
s5="physics"
s6="chemistry"
s7="biology"
s8="math"

a=fuzz.WRatio(s1, s2)
print("overall",a)
b=fuzz.WRatio(s1, s3)
print("Tamil",b)
c=fuzz.WRatio(s1, s4)
print("English",c)
d=fuzz.WRatio(s1, s5)
print("physics",d)
e=fuzz.WRatio(s1, s6)
print("chemistry",e)
f=fuzz.WRatio(s1, s7)
print("biology",f)
g=fuzz.WRatio(s1, s8)
print("math",g)


if a > 80 :
  M = overall()

elif b > 80 :
  Z= tamil()
elif c > 80 :
  Y = eng()
elif d > 80 :
  X = phy()
elif e > 80 :
  W = che()
elif f > 80 :
  V = bio()
elif g > 80 :
  T = math()
else:
  print("Invalid input")

import pandas as pd
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

def A():
  A = pd.read_excel("Consumables_Registers.xlsx")
  print(A)
  return A
def B():
  B = pd.read_excel("Employee_Attendance.xlsx")
  print(B)
  return B
def C():
  C = pd.read_excel("Feedback_and_Customer_Detail.xlsx")
  print(C)
  return C
def D():
  D = pd.read_excel("Income_Tax_Detail.xlsx")
  print(D)
  return D
def E():
  E = pd.read_excel("Salary_Detail.xlsx")
  print(E)
  return E
def F():
  F = pd.read_excel("Sales_and_Profit.xlsx")
  print(F)
  return F
def G():
  G = pd.read_excel("Stock_Register.xlsx")
  print(G)
  return(G)

Z = input("Enter your value = ")

Z1 = "consumable register"
Z2 = "employee attendance"
Z3 = "feedback and customer"
Z4 = "income tax"
Z5 = "salary"
Z6 = "sales and profit"
Z7 = "stocks"

Y1=fuzz.WRatio(Z, Z1)
print("consumable =",Y1)
Y2=fuzz.WRatio(Z, Z2)
print("employee attendance =",Y2)
Y3=fuzz.WRatio(Z, Z3)
print("feedback and customer =",Y3)
Y4=fuzz.WRatio(Z, Z4)
print("income tax =",Y4)
Y5=fuzz.WRatio(Z, Z5)
print("salary =",Y5)
Y6=fuzz.WRatio(Z, Z6)
print("sales and profit =",Y6)
Y7=fuzz.WRatio(Z, Z7)
print("stocks =",Y7)

if Y1 > 80 :
  M = A()
elif Y2 > 80 :
  Z= B()
elif Y3 > 80 :
  Y = C()
elif Y4 > 80 :
  X = D()
elif Y5 > 80 :
  W = E()
elif Y6 > 80 :
  V = F()
elif Y7 > 80 :
  T = G()
else:
  print("Invalid input")

import pandas as pd

def A():
  A = pd.read_excel("Consumables_Registers.xlsx")
  print(A)
  return A
def B():
  B = pd.read_excel("Employee_Attendance.xlsx")
  print(B)
  return B
def C():
  C = pd.read_excel("Feedback_and_Customer_Detail.xlsx")
  print(C)
  return C
def D():
  D = pd.read_excel("Income_Tax_Detail.xlsx")
  print(D)
  return D
def E():
  E = pd.read_excel("Salary_Detail.xlsx")
  print(E)
  return E
def F():
  F = pd.read_excel("Sales_and_Profit.xlsx")
  print(F)
  return F
def G():
  G = pd.read_excel("Stock_Register.xlsx")
  print(G)
  return(G)

Z = input("Enter your value = ")

Y = Z.lower()

T = ['show','the','a','list','details','give','report','detail','register']

X = Y.split()

filter = [word for word in X if word.lower() not in T]

key = " ".join(filter)

if key =='consumables' or key == 'consumable':
  A()
elif key == 'employee attendance' or key == 'employee' or key == 'attendance' or key == 'staff attendance':
  B()
elif key == 'feedback' or key == 'customer' or key == 'feedback and customer' or key == 'customer and feedback':
  C()
elif key == 'income tax' or key == 'tax':
  D()
elif key == 'salary':
  E()
elif key == 'sales and profit' or key == 'sales' or key == 'profit' or key == 'profit and sales':
  F()
elif key == 'stock' or key == 'stocks':
  G()
else:
  Z = key

  Z1 = "consumable register"
  Z2 = "employee attendance"
  Z3 = "feedback and customer"
  Z4 = "income tax"
  Z5 = "salary"
  Z6 = "sales and profit"
  Z7 = "stocks"

  Y1=fuzz.WRatio(Z, Z1)
  print("consumable =",Y1)
  Y2=fuzz.WRatio(Z, Z2)
  print("employee attendance =",Y2)
  Y3=fuzz.WRatio(Z, Z3)
  print("feedback and customer =",Y3)
  Y4=fuzz.WRatio(Z, Z4)
  print("income tax =",Y4)
  Y5=fuzz.WRatio(Z, Z5)
  print("salary =",Y5)
  Y6=fuzz.WRatio(Z, Z6)
  print("sales and profit =",Y6)
  Y7=fuzz.WRatio(Z, Z7)
  print("stocks =",Y7)

  if Y1 > 80 :
    M = A()
  elif Y2 > 80 :
    Z= B()
  elif Y3 > 80 :
    Y = C()
  elif Y4 > 80 :
    X = D()
  elif Y5 > 80 :
    W = E()
  elif Y6 > 80 :
    V = F()
  elif Y7 > 80 :
    T = G()
  else:
    print("Invalid input")

import pandas as pd

def A():
  A = pd.read_excel("Consumables_Registers.xlsx")
  print(A)
  return A
def B():
  B = pd.read_excel("Employee_Attendance.xlsx")
  print(B)
  return B
def C():
  C = pd.read_excel("Feedback_and_Customer_Detail.xlsx")
  print(C)
  return C
def D():
  D = pd.read_excel("Income_Tax_Detail.xlsx")
  print(D)
  return D
def E():
  E = pd.read_excel("Salary_Detail.xlsx")
  print(E)
  return E
def F():
  F = pd.read_excel("Sales_and_Profit.xlsx")
  print(F)
  return F
def G():
  G = pd.read_excel("Stock_Register.xlsx")
  print(G)
  return(G)

Z = input("Enter your value = ")

Y = Z.lower()

T = ['show','the','a','list','details','give','report','detail','register','by']

X = Y.split()

filter = [word for word in X if word.lower() not in T]

key = " ".join(filter)

if key =='consumables' or key == 'consumable':
  A()
elif key == 'employee attendance' or key == 'employee' or key == 'attendance' or key == 'staff attendance':
  B()
elif key == 'feedback' or key == 'customer' or key == 'feedback and customer' or key == 'customer and feedback':
  C()
elif key == 'income tax' or key == 'tax':
  D()
elif key == 'salary':
  E()
elif key == 'sales and profit' or key == 'sales' or key == 'profit' or key == 'profit and sales':
  F()
elif key == 'stock' or key == 'stocks':
  G()
else:
  print("Invalid input")

import pandas as pd
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

def A():
  A = pd.read_excel("Consumables_Registers.xlsx")
  print(A)
  return A
def B():
  B = pd.read_excel("Employee_Attendance.xlsx")
  print(B)
  return B
def C():
  C = pd.read_excel("Feedback_and_Customer_Detail.xlsx")
  print(C)
  return C
def D():
  D = pd.read_excel("Income_Tax_Detail.xlsx")
  print(D)
  return D
def E():
  E = pd.read_excel("Salary_Detail.xlsx")
  print(E)
  return E
def F():
  F = pd.read_excel("Sales_and_Profit.xlsx")
  print(F)
  return F
def G():
  G = pd.read_excel("Stock_Register.xlsx")
  print(G)
  return(G)

Z = input("Enter your value = ")

Z1 = "consumable register"
Z2 = "employee attendance"
Z3 = "feedback and customer"
Z4 = "income tax"
Z5 = "salary"
Z6 = "sales and profit"
Z7 = "stocks"

Y1=fuzz.WRatio(Z, Z1)
print("consumable =",Y1)
Y2=fuzz.WRatio(Z, Z2)
print("employee attendance =",Y2)
Y3=fuzz.WRatio(Z, Z3)
print("feedback and customer =",Y3)
Y4=fuzz.WRatio(Z, Z4)
print("income tax =",Y4)
Y5=fuzz.WRatio(Z, Z5)
print("salary =",Y5)
Y6=fuzz.WRatio(Z, Z6)
print("sales and profit =",Y6)
Y7=fuzz.WRatio(Z, Z7)
print("stocks =",Y7)

if Y1 > 80 :
  M = A()
elif Y2 > 80 :
  Z= B()
elif Y3 > 80 :
  Y = C()
elif Y4 > 80 :
  X = D()
elif Y5 > 80 :
  W = E()
elif Y6 > 80 :
  V = F()
elif Y7 > 80 :
  T = G()
else:

  Y = Z.lower()

  T = ['show','the','a','list','details','give','report','detail','register']

  X = Y.split()

  filter = [word for word in X if word.lower() not in T]

  key = " ".join(filter)

  if key =='consumables' or key == 'consumable':
    A()
  elif key == 'employee attendance' or key == 'employee' or key == 'attendance' or key == 'staff attendance':
    B()
  elif key == 'feedback' or key == 'customer' or key == 'feedback and customer' or key == 'customer and feedback':
    C()
  elif key == 'income tax' or key == 'tax':
    D()
  elif key == 'salary':
    E()
  elif key == 'sales and profit' or key == 'sales' or key == 'profit' or key == 'profit and sales':
    F()
  elif key == 'stock' or key == 'stocks':
    G()
  else:
    print("Invalid input")

age = 25
income = 50000

if age >= 18:  # First condition
    print("You are an adult.")

    if income >= 40000:  # Second condition nested within the first
        print("You have a stable income.")
    else:
        print("You have a low income.")
else:
    print("You are a minor.")

def add_numbers():
    a = 5
    b = 3
    result = a + b
    return result
def subtract_numbers():
    a = 5
    b = 3
    result = a - b
    return result
def multiply_numbers():
    a = 5
    b = 3
    result = a * b
    return result
def divide_numbers():
    a = 5
    b = 3
    result = a / b
    return result
a=input("enter 1 to print addition")
if a=="1":
    a1=add_numbers()
    print(a1)
    a=input("enter 1 to print Subraction")
    if a=="1":
        a2=subtract_numbers()
        print(a2)
        a=input("enter 1 to print multiplication")
        if a=="1":
            a3=multiply_numbers()
            print(a3)
            a=input("enter 1 to print division")
            if a=="1":
                a4=divide_numbers()
                print(a4)

def add_numbers():
    a = 5
    b = 3
    result = a + b
    return result
def subtract_numbers():
    a = 5
    b = 3
    result = a - b
    return result
def multiply_numbers():
    a = 5
    b = 3
    result = a * b
    return result
def divide_numbers():
    a = 5
    b = 3
    result = a / b
    return result
a=input("enter 1 to print addition")
if a=="1":
    a1=add_numbers()
    print(a1)
    a=input("enter 1 to print Subraction")
    if a=="1":
        a2=subtract_numbers()
        print(a2)
        a=input("enter 1 to print multiplication")
        if a=="1":
            a3=multiply_numbers()
            print(a3)
            a=input("enter 1 to print division")
            if a=="1":
                a4=divide_numbers()
                print(a4)
            else:
                print("invalid input")
        else:
            print("invalid input")
    else:
        print("invalid input")
else:
    print("invalid input")

person="jose"
print("my name is {}".format(person))

person="jose"
print("{} is my name ".format(person))

person="jose"
print("hi {} how are you ".format(person))

person="jose"
print(" {}  ".format(person))

person="jose"
print(f" hi my name is {person}  ")

a="Raja"
b="27"
c="Tamil Nadu"
print(f"My name is {a} I am {b} years old from {c}")

a=input("Enter name");
b=input("Enter age");
c=input("Enter place");
print(f"My name is {a} I am {b} years old from {c}")

for x in range(5):
  a=input("Enter name");
  b=input("Enter age");
  c=input("Enter place");
  print(f"My name is {a} i am {b} years old from {c}")

a="Raja"
b="27"
c="Tamil Nadu"
d="\U0001F934"
print(f"My name is {a} I am {b} years old from {c} ..{d} ")

a1 = "\U0001F600"  # Grinning face
a2 = "\U0001F601"  # Beaming face
a3 = "\U0001F602"  # Grinning face with big eyes
a4 = "\U0001F603"  # Grinning face with smiling eyes
a5 = "\U0001F604"  # Smiling face with heart eyes
a6 = "\U0001F605"  # Smiling face with smiling eyes
a7 = "\U0001F606"  # Grinning face
a8 = "\U0001F607"  # Grinning face with big eyes
a9 = "\U0001F608"  # Smiling face
a10 = "\U0001F609"  # Smiling face with smiling eyes
a11 = "\U0001F60A"  # Smiling face
a12 = "\U0001F60B"  # Smiling face
a13 = "\U0001F60C"  # Smiling face
a14 = "\U0001F60D"  # Heart eyes
a15 = "\U0001F60E"  # Smiling face
a16 = "\U0001F60F"  # Smiling face
a17 = "\U0001F610"  # Neutral face
a18 = "\U0001F611"  # Expressionless face
a19 = "\U0001F612"  # Unamused face
a20 = "\U0001F613"  # Face with cold sweat
a21 = "\U0001F614"  # Disappointed face
a22 = "\U0001F615"  # Worried face
a23 = "\U0001F616"  # Angry face
a24 = "\U0001F617"  # Fearful face
a25 = "\U0001F618"  # Weeping face
a26 = "\U0001F619"  # Face with open mouth
a27 = "\U0001F620"  # Grimacing face
a28 = "\U0001F621"  # Confused face
a29 = "\U0001F622"  # Disgusted face
a30 = "\U0001F923"  # Rolling on the floor laughing
a31 = "\U0001F924"  # Grinning face
a32 = "\U0001F925"  # Grinning face
a33 = "\U0001F926"  # Grinning face
a34 = "\U0001F927"  # Smiling face
a35 = "\U0001F928"  # Smiling face
a36 = "\U0001F929"  # Winking face
a37 = "\U0001F92A"  # Smiling face
a38 = "\U0001F92B"  # Smiling face
a39 = "\U0001F92C"  # Grinning face
a40 = "\U0001F92D"  # Grinning face
a41 = "\U0001F92E"  # Grinning face
a42 = "\U0001F92F"  # Grinning face
a43 = "\U0001F930"  # Smiling face
a44 = "\U0001F931"  # Smiling face
a45 = "\U0001F932"  # Smiling face
a46 = "\U0001F933"  # Smiling face
a47 = "\U0001F934"  # Smiling face
a48 = "\U0001F935"  # Smiling face
a49 = "\U0001F936"  # Smiling face
a50 = "\U0001F937"  # Smiling face


"""Here are some Unicode code points for various smiley faces:

Smiling face: U0001F600
Grinning face with big eyes: U0001F603
Grinning face with smiling eyes: U0001F604
Beaming face with smiling eyes: U0001F601
Grinning squinting face: U0001F606
Rolling on the floor laughing: U0001F923
Smiling face with hearts: U0001F970
Smiling face with sunglasses: U0001F60E
Smiling face with halo: U0001F607
Smiling face with horns: U+1F608"""

# Open a file for writing
with open('greeting.txt', 'w') as file:

    file.write('Hi  .....')

with open('greeting.txt', 'w') as file:

    file.write('Hi I am Gokul my address is 21, pillaiyar kovil street, Rangapuram, Kondalampatty, Salem - 10')

with open("greeting.txt", "r") as file:

    # Read the contents of the file
    file_contents = file.read()

    # Print the contents of the file
    print(file_contents)

#append
for i in range(3):
    with open('d2.txt', 'a') as file:# a rep append
        # Write "Hi how are you" to the file
        x = input("text to write=")
        file.write(x + '\n''\n')  # x Adding a newline for better separation of lines

with open("d2.txt", "r") as file:

    # Read the contents of the file
    file_contents = file.read()

    # Print the contents of the file
    print(file_contents)

import re

txt = "Heavy rain in TN"
x = re.split("\s", txt)
print(x)

import re
with open("greeting.txt", "r") as file :
    file_contents = file.read()
    x=  re.split("\s" , file_contents)
    print(x)

import re
with open("t.txt","r") as file:
  file_contents = file.read()
  X = re.split("\s",file_contents)
  Z = X
with open("t.txt","r") as file:
  file_contents = file.read()
  Y = re.split("\s",file_contents)
  S = Y
  print(Y)
print(len(X))
print(Z[1:7])
Z[4]="Natural"
print(Z)
Z.pop(7)
print(Z)
del Z[5]
print(Z)
Z.extend(S)
print(Z)

import re
with open("t.txt","r") as file:
  file_contents = file.read()
  X = re.split("\s",file_contents)
  Z = X
  Z.pop(2)
  print(Z)

import re
with open("t.txt","r") as file:
  file_contents = file.read()
  X = re.split("\s",file_contents)
  Z = X
  del Z[5]
  print(Z)

X = input("Enter the value =")
A = X.lower()
print(A)

X = input("Enter the value =")
A = X.upper()
print(A)

X = input("Enter the value =")
A = X.title()
print(A)

#puntuation
import re
x11=input("Enter a text=")
# Use regular expression to remove punctuation
a1 = re.sub(r'[^\w\s]', '', x11)
print(a1)

import re # remove numbers
text = input("Input =")
a=re.sub(r'\d+', '', text)
print(a)

#Special cha
import re
text = input("Input =")
a12=re.sub(r'[^A-Za-z0-9\s]+', '', text)
print(a12)

import re
with open("test.txt","r") as file:
  A = file.read()
  A1 = A.lower()
  A2 = re.sub(r'[^\w\s]', '', A1)
  A3 = re.sub(r'\d+', '', A2)
  A4 = re.sub(r'[^A-Za-z0-9\s]+', '', A3)
  print(A4)

import re

txt = "That will be 59 dollars"

#Find all digit characters:

x = re.findall("\d", txt)
print(x)

import re

txt = "That will be 59 dollars"

#Find all characters:

x = re.findall("bala", txt)
print(x)

import re

txt = "That will be 59 dollars"

#Find all characters:

x = re.findall("will", txt)
print(x)

import re #numbers

txt = "That will be -59 dollars and zero is 0, also -100 and 200 are here"

# Find all digit characters
x = re.findall(r'-?\d+', txt)
print(x)

import re

txt = "That will be -59 dollars and zero is 0, also -100 and 200 are here"

# Find negative numbers and zero
x = re.findall(r'-\d+|0\b', txt)
print(x)

#first  and last
import re

txt = "hi planet hello bala"

# Check if the string starts with 'hello'
x = re.findall("^hello", txt)
print(x)
if x:
    print("Yes, the string starts with 'hello'")
else:
    print("No match")

# Check if the string ends with 'bala'
y = re.findall("bala$", txt)
print(y)
if y:
    print("Yes, the string ends with 'bala'")
else:
    print("No match")

A = ["apple", "banana", "cherry"]
if "apple" in A:
    print("Found 'apple' in the list!")
else:
    print("'apple' is not in the list.")

import re
with open("test.txt","r") as file:
  A = file.read()
  A1 = A.lower()
  A2 = re.sub(r'[^\w\s]', '', A1)
  A3 = re.sub(r'\d+', '', A2)
  A4 = re.sub(r'[^A-Za-z0-9\s]+', '', A3)
  A5 = re.split("\s",A4)
  print(A5)
if "stock" in A5:
  print("Content is related to stock market")
elif "health" in A5:
  print("Content related to Health care")
else:
  print("Couldn't find the relation")

import nltk
nltk.download('punkt')
nltk.download('punkt_tab')
nltk.download('averaged_perceptron_tagger')
nltk.download('maxent_ne_chunker')
nltk.download('words')

pip install nltk

import nltk
from nltk.tokenize import word_tokenize

# Ensure NLTK's tokenizer is downloaded
nltk.download('punkt')

a = "Hi how are you"
tokens = word_tokenize(a)
print(tokens)

import nltk
from nltk.tokenize import word_tokenize

text = "hi I am balamurugan"
filter = ("hi", "I", "am")

tokens = word_tokenize(text)
filtered_tokens = [token for token in tokens if token not in filter]

filtered_text = ' '.join(filtered_tokens)
print(filtered_text)

# Stop word
'''Here are some examples of stop words in English:

the
is
at
which
on
in
a
an
of
and
so
I
you
he
she
it'''

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# Download NLTK stopwords
nltk.download('stopwords')
nltk.download('punkt')

# Define the input sentence
input_sentence = input("Enter =")

# Tokenize the input sentence
tokens = word_tokenize(input_sentence)

# Get English stopwords
stop_words = set(stopwords.words('english'))

# Remove stopwords
filtered_tokens = [word for word in tokens if word.lower() not in stop_words]

# Join the filtered tokens back into a sentence
filtered_sentence = " ".join(filtered_tokens)

print("Original Sentence:")
print(input_sentence)
print("\nFiltered Sentence:")
print(filtered_sentence)

#add words
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# Download NLTK stopwords
nltk.download('stopwords')
nltk.download('punkt')

# Define the input sentence
input_sentence = input("Enter =")

# Tokenize the input sentence
tokens = word_tokenize(input_sentence)

# Get English stopwords
stop_words = set(stopwords.words('english'))

# Add custom stopwords
additional_stopwords = ["leading", "platform", "building","hi"]
stop_words.update(additional_stopwords)

# Remove stopwords
filtered_tokens = [word for word in tokens if word.lower() not in stop_words]

# Join the filtered tokens back into a sentence
filtered_sentence = " ".join(filtered_tokens)

print("Original Sentence:")
print(input_sentence)
print("\nFiltered Sentence:")
print(filtered_sentence)

#remove words
import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize

# Download NLTK stopwords
nltk.download('stopwords')
nltk.download('punkt')

# Define the input sentence
input_sentence = "NLTK is a leading platform for building Python programs to work with human language data."

# Tokenize the input sentence
tokens = word_tokenize(input_sentence)

# Get English stopwords
stop_words = set(stopwords.words('english'))

# Remove specific words from the stopwords list
words_to_remove = ["is", "a", "for", "to", "with"]
for word in words_to_remove:
    stop_words.remove(word)

# Remove stopwords
filtered_tokens = [word for word in tokens if word.lower() not in stop_words]

# Join the filtered tokens back into a sentence
filtered_sentence = " ".join(filtered_tokens)

print("Original Sentence:")
print(input_sentence)
print("\nFiltered Sentence:")
print(filtered_sentence)

import nltk
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import re

def A():
  with open("t1.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return A
def B():
  with open("t2.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return B
def C():
   with open("t3.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return C
def D():
   with open("t4.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return D
def E():
   with open("t5.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return E
def F():
   with open("t6.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return F
def G():
   with open("t7.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return G
def H():
   with open("t8.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return H
def I():
   with open("t9.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return I
def J():
   with open("t10.txt","r") as file:
    file_contents = file.read()
    print(file_contents)
    return J

A = input("How can I help you = ")
A1 = A.lower()
A2 = re.sub(r'[^\w\s]', '', A1)
A3 = re.sub(r'\d+', '', A2)
A4 = re.sub(r'[^A-Za-z0-9\s]+', '', A3)
A5 = re.split("\s",A4)
stop_words = set(stopwords.words('english'))
filtered_tokens = [word for word in tokens if word.lower() not in stop_words]

print(filtered_tokens)

if A5 == "electromagnetism" or A5 == "electromagnetisms":
  A()
else:
  print("Error")

import re
with open("t1.txt","r") as file:
  A = file.read()
  A1 = A.lower()
  A2 = re.sub(r'[^\w\s]', '', A1)
  A3 = re.sub(r'\d+', '', A2)
  A4 = re.sub(r'[^A-Za-z0-9\s]+', '', A3)
  A5 = re.split("\s",A4)

pip install googletrans==4.0.0-rc1

#conda install conda-forge::googletrans
#conda install conda-forge/label/cf201901::googletrans
#conda install conda-forge/label/cf202003::googletrans

#en english es spanish
from googletrans import Translator

t = Translator()
a = "Hello, how are you?"
translated_text = t.translate(a, src='en', dest='es')
b=translated_text.text
print(b)

#en english es spanish
from googletrans import Translator

t = Translator()
a = "Hello, how are you?"
translated_text = t.translate(a, src='en', dest='ta')
b=translated_text.text
print(b)

from textblob import TextBlob
text = "I love this product! It's amazing!"
blob = TextBlob(text)

# Get sentiment polarity (-1 to 1, where -1 is very negative, 0 is neutral, and 1 is very positive)
polarity = blob.sentiment.polarity

# Classify sentiment
if polarity > 0:
  print("positive")
elif polarity < 0:
  print("negative")
else:
  print("neutral")
print(polarity)

from textblob import TextBlob
text = input("enter=")
blob = TextBlob(text)

# Get sentiment polarity (-1 to 1, where -1 is very negative, 0 is neutral, and 1 is very positive)
polarity = blob.sentiment.polarity

# Classify sentiment
if polarity > 0:
  print("positive")
elif polarity < 0:
  print("negative")
else:
  print("neutral")
print(polarity)

from textblob import TextBlob
text = input("enter=")
blob = TextBlob(text)

# Get sentiment polarity (-1 to 1, where -1 is very negative, 0 is neutral, and 1 is very positive)
polarity = blob.sentiment.polarity
print(polarity)

pip install transformers

#sentiment analysis
from transformers import pipeline

# Load the sentiment analysis pipeline with a specific model
sentiment_analysis = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")

# Text to analyze
text = "I love using Hugging Face Transformers!"

# Analyze sentiment
result = sentiment_analysis(text)

# Print the result
print(result)

from transformers import pipeline

# Load the sentiment analysis pipeline with a specific model
sentiment_analysis = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")

# Text to analyze
text = "I dont like Java"

# Analyze sentiment
result = sentiment_analysis(text)

# Store the sentiment score in a variable
score = result[0]['score']

# Print the result
print("Sentiment Score:", score)

#star
from transformers import pipeline

# Load the sentiment analysis pipeline with a specific model
sentiment_analysis = pipeline("sentiment-analysis", model="nlptown/bert-base-multilingual-uncased-sentiment")

# Text to analyze
text = "I dont like Java"

# Analyze sentiment
result = sentiment_analysis(text)

# Store the sentiment label in a variable
label = result[0]['label']

# Print the result
print("Sentiment Label:", label)

#prompt
import warnings
from transformers import pipeline

# Suppress warning messages
warnings.filterwarnings("ignore")

# Load text generation pipeline
text_generator = pipeline("text-generation", model="gpt2")

# Generate text with `pad_token_id` set explicitly
generated_text = text_generator("Java is", pad_token_id=50256)
print(generated_text)

import warnings
from transformers import pipeline

# Suppress warning messages
warnings.filterwarnings("ignore")

# Load text generation pipeline
text_generator = pipeline("text-generation", model="gpt2")

# Generate text with `pad_token_id` set explicitly
generated_output = text_generator("Java is", pad_token_id=50256)

# Extract and print the generated text only
generated_text = generated_output[0]['generated_text']
print(generated_text)

import warnings
from transformers import pipeline

# Suppress warning messages
warnings.filterwarnings("ignore")

# Load text generation pipeline
text_generator = pipeline("text-generation", model="gpt2")

# Generate text with `pad_token_id` set explicitly
generated_output = text_generator("Java is", pad_token_id=50256)

# Extract the generated text
generated_text = generated_output[0]['generated_text']
print(generated_text)
# Write the generated text to a .txt file
file_path = "generated_text.txt"
with open(file_path, "w") as file:
    file.write(generated_text)

print(f"Generated text has been written to {file_path}")

#extract name
import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

# Sample sentence
sentence = "On March 15, 2024, Sam, an experienced software engineer,will receive  $5,000 for his project and Rs 2 lakh for additional services."

# Process the sentence with spaCy
doc = nlp(sentence)

# Extract names (entities labeled as PERSON)
names = [ent.text for ent in doc.ents if ent.label_ == "PERSON"]

print("Extracted Names:", names)

#Verb
import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

# Sample sentence
sentence = "On March 15, 2024, John, an experienced software engineer,will receive  $5,000 for his project and Rs 2 lakh for additional services."

# Process the sentence with spaCy
doc = nlp(sentence)

# Store all verbs in a list
verbs = [token.text for token in doc if token.pos_ == "VERB"]

# Print the extracted verbs
print("Extracted Verbs:", verbs)

#Extracted Nouns
import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

# Sample sentence
sentence = "On March 15, 2024, John, an experienced software engineer,will receive  $5,000 for his project and Rs 2 lakh for additional services."

# Process the sentence with spaCy
doc = nlp(sentence)

# Store all nouns in a list
nouns = [token.text for token in doc if token.pos_ == "NOUN"]

# Print the extracted nouns
print("Extracted Nouns:", nouns)

#extracted adjectives
import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

# Sample sentence
sentence = "On March 15, 2024, John, an experienced software engineer,will receive  $5,000 for his project and Rs 2 lakh for additional services."

# Process the sentence with spaCy
doc = nlp(sentence)

# Store all adjectives in a list
adjectives = [token.text for token in doc if token.pos_ == "ADJ"]

# Print the extracted adjectives
print("Extracted Adjectives:", adjectives)

import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

# Sample sentence
sentence = "On March 15, 2024, John, an experienced software engineer,will receive  $5,000 for his project and Rs 2 lakh for additional services."

# Process the sentence with spaCy
doc = nlp(sentence)

# Store all pronouns in a list
pronouns = [token.text for token in doc if token.pos_ == "PRON"]

# Print the extracted pronouns
print("Extracted Pronouns:", pronouns)

import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

# Sample sentence
sentence = "On March 6, 2024, John, an experienced software engineer,will receive  $5,000 for his project and Rs 2 lakh for additional services."

# Process the sentence with spaCy
doc = nlp(sentence)

# Extract dates from the named entities
dates = [ent.text for ent in doc.ents if ent.label_ == "DATE"]

# Print the extracted dates
print("Extracted Dates:", dates)

import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

# Sample sentence
sentence = "John from TATA India is working in Apple now "
# Process the sentence with spaCy
doc = nlp(sentence)

# Extract organizations from the named entities
organizations = [ent.text for ent in doc.ents if ent.label_ == "ORG"]

# Print the extracted organizations
print("Extracted Organizations:", organizations)

#Country name
import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

# Sample sentence
sentence = "On March 15, 2024, John from USA , an experienced software engineer,will receive  $5,000 for his project and Rs 2 lakh for additional services from India."

# Process the sentence with spaCy
doc = nlp(sentence)

# Extract countries from the named entities
countries = [ent.text for ent in doc.ents if ent.label_ == "GPE"]

# Print the extracted countries
print("Extracted Countries:", countries)

import numpy as np
arr = np.arange(10)
print("The array over the given range is ",arr)

import numpy as np
arr = np.arange(0,10,2,float)
print(arr)

import numpy as np
x = np.random.rand(10)# one dimension array
print(x)

import numpy as np
x = np.random.rand(100)# one dimension array
print(x)

#Shuffle
from numpy import random
import numpy as np
a= np.array([1, 2, 3, 4, 5])
random.shuffle(a)
print(a)

from numpy import random
x = random.choice([3, 5,0], p=[0.4, 0.3,0.3], size=(100))
print(x)

from numpy import random
x = random.choice(["Arun", "Dinesh", "Jack", "Edvin"], p=[0.1, 0.7, 0.1, 0.1], size=(100))
print(x)

#random Excel creation
import numpy as np
from numpy import random
import pandas as pd

arr = ['Arun', 'Akash', 'Sanjay', 'Manu']
a=np.random.choice(arr, p=[0.5, 0.1, 0.1, 0.3],size=(1500))
b = random.choice([30, 52, 72, 91,80,60], p=[0.1, 0.2, 0.3, 0.1,0.1,0.2], size=(1500))
c = random.choice([30, 52, 72, 91,80,60], p=[0.1, 0.2, 0.3, 0.1,0.1,0.2], size=(1500))
d = random.choice([30, 52, 72, 91,80,60], p=[0.1, 0.2, 0.3, 0.1,0.1,0.2], size=(1500))
e = random.choice([30, 52, 72, 91,80,60], p=[0.1, 0.2, 0.3, 0.1,0.1,0.2], size=(1500))
f = random.choice([30, 52, 72, 91,80,60], p=[0.1, 0.2, 0.3, 0.1,0.1,0.2], size=(1500))

frame={"Name":a, "M1":b, "M2":b, "M3":c,"M4":d,"M5":e,"M6":f}
df=pd.DataFrame(frame)
print(df)
df.to_excel('mark.xlsx', index=False)

import numpy as np
# Initialize random number generator
rng = np.random.default_rng()
# Generate random integers between 1 and 2 (inclusive)
num_records = 10
random_numbers = rng.integers(1, 3, size=num_records)
print(random_numbers)

#float cant be given
import numpy as np
# Initialize random number generator
rng = np.random.default_rng()
# Generate random floating-point numbers between 1 and 3
num_records = 10
random_numbers = rng.uniform(1, 3, size=num_records)
print(random_numbers)

import numpy as np# Generate 10 unique random integers between 1 and 100
# Initialize random number generator
rng = np.random.default_rng()
# Generate 10 unique random integers between 1 and 100
num_records = 10
unique_integers = rng.choice(np.arange(1, 101), size=num_records, replace=False)
print(unique_integers)

#names
import numpy as np

rng = np.random.default_rng()
name_list = ["John", "Alice",  "Sophia", "Liam", "Emma", "Noah", "Olivia", "James", "Mia"]
num_records = 100
# Generate random names by selecting from the name_list
random_names = rng.choice(name_list, size=num_records, replace=True)
print(random_names)

import numpy as np
import pandas as pd

rng = np.random.default_rng()
name_list = ["Vishnu","Praveen","Balaji","Lokesh","Bhavani","Mani","Keerthana","Susan","Harisha","Sasi","Gokul","Vinitha","Kamal","Deepika","Archana","Keerthana","Vinoth","Vignesh","Santhosh","Ranjith"]
num_record=20
random_names = rng.choice(name_list,size=num_record,replace=False)
print(random_names)
Salary = rng.choice(np.arange(10000,50000),size=num_record,replace=False)
print(Salary)
Tax = rng.choice(np.arange(10,20),size=num_record,replace=True)
print(Tax)
Frame = {"Employee Name":name_list,"Salary":Salary,"Tax":Tax}
Employee_List = pd.DataFrame(Frame)
print(Employee_List)
Employee_List.to_excel("Employee.xlsx")

#Hiechreacial clusturing
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import AgglomerativeClustering

x = [1,2,3,6,7,8]
y = [4,5,6,7,8,5]

data = list(zip(x, y))

hierarchical_cluster = AgglomerativeClustering(n_clusters=3, metric='euclidean', linkage='ward')
labels = hierarchical_cluster.fit_predict(data)

plt.scatter(x, y,c=labels)
plt.show()
print(data)

#K neighbour
x = [1,  2,  3,  4,   5,  6,  7 ,  8,  9,   10]
y = [10, 20, 30, 40, 50, 60, 70 , 80, 90, 100]
c = [0,  0,  0,  0,  0,  1,  1,   1,  1,  1]
from sklearn.neighbors import KNeighborsClassifier
data = list(zip(x, y))
knn = KNeighborsClassifier(n_neighbors=1)
knn.fit(data, c)
a=float(input("enter x value"))
b=float(input("enter y value"))
new_x = a
new_y = b
new_point = [(new_x, new_y)]
prediction = knn.predict(new_point)
print("Predited class is",prediction)

#logistic regression
import numpy
from sklearn import linear_model

#Reshaped for Logistic function.
X = numpy.array([50, 52, 55, 60, 61, 62, 70, 75, 76, 77, 80, 88]).reshape(-1,1)
y = numpy.array([0,  0,   0,  0,  0,  0,  1,  1,  1,  1,  1,  1])

logr = linear_model.LogisticRegression()
logr.fit(X,y)
a=float(input("enter value to be predicted ="))
predicted = logr.predict(numpy.array([a]).reshape(-1,1))
print(" predicted value =",predicted)

from scipy import stats
x = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]
y = [10,20,30,40,50,60,70,80,90,100,110,120,130,140,150,160,170,180,190,200]
slope, intercept, r, p, std_err = stats.linregress(x, y)
x=float(input("enter value to be predicted="))
ypred = slope * x + intercept
print(ypred)

import matplotlib.pyplot as plt

df = pd.read_csv("diabetes.csv")

# Define the features and target variable
features = ['Pregnancies', 'Glucose', 'Pressure', 'Skin', 'Insulin', 'BMI', 'Diabetes', 'Age']
X = df[features]
y = df['Outcome']

# Train the decision tree classifier
dtree = DecisionTreeClassifier()
dtree = dtree.fit(X, y)

# Plot the decision tree
tree.plot_tree(dtree, feature_names=features)

# Make a prediction using a DataFrame with the correct feature names
input_data = pd.DataFrame([[6, 148, 72, 35, 0, 33, 0.62, 50]], columns=features)
prediction = dtree.predict(input_data)

# Output the predicted class
a = prediction[0]
print("Predicted class", a)

import matplotlib.pyplot as plt

df = pd.read_csv("diabetes.csv")

# Define the features and target variable
features = ['Pregnancies', 'Glucose', 'Pressure', 'Skin', 'Insulin', 'BMI', 'Diabetes', 'Age']
X = df[features]
y = df['Outcome']

# Train the decision tree classifier
dtree = DecisionTreeClassifier()
dtree = dtree.fit(X, y)

# Plot the decision tree
tree.plot_tree(dtree, feature_names=features)

# Make a prediction using a DataFrame with the correct feature names
input_data = pd.DataFrame([[6, 148, 72, 35, 0, 33, 0.62, 50]], columns=features)
prediction = dtree.predict(input_data)

# Output the predicted class
a = prediction[0]
print("Predicted class", a)

from PIL import Image
im = Image.open("cat.jpg")
#Show actual Image
display(im)

from PIL import Image
im = Image.open("836.jpg")
#Show actual Image
display(im)

#rotate and save
from PIL import Image
a= Image.open("cat.jpg")

display(a)
#Show rotated Image
b = a.rotate(90)
display(b)
b.save("cat0.jpg")

from PIL import Image
a= Image.open("car1.jpg")

display(a)

from PIL import Image
a= Image.open("car1.jpg")
display(a)
b = a.rotate(10)
display(b)
b.save("car10.jpg")
c = a.rotate(20)
display(c)
d = a.rotate(45)
display(d)
e = a.rotate(90)
display(e)
f = a.rotate(120)
display(f)
g = a.rotate(150)
display(g)
h = a.rotate(180)
display(h)

#blur
from PIL import Image, ImageFilter
a = Image.open('car.jpg')
blurImage = a.filter(ImageFilter.BLUR)
display(blurImage)
#Save blurImage
blurImage.save('cat1.jpg')
display(a)

from PIL import Image, ImageFilter

a = Image.open('cat.jpg')
embossImage = a.filter(ImageFilter.EMBOSS)
display(embossImage)
embossImage.save('cat_emboss.jpg')

# contour
image = Image.open('cat.jpg')
contour_image = image.filter(ImageFilter.CONTOUR)
contour_image.save('cat_contour.jpg')
display(contour_image)

from PIL import Image
im = Image.open("cat.jpg")
display(im)
original_size = im.size  # (width, height)
new_size = (original_size[0] * 2, original_size[1] * 2)
im_resized = im.resize(new_size)
im_resized.save("cat_resized.jpg")
zoom=Image.open("cat_resized.jpg")
display(zoom)

#crop
from PIL import Image
image = Image.open("cat.jpg")

crop_box = (100, 100, 200, 200)

cropped_image = image.crop(crop_box)
display(cropped_image)
cropped_image.save("cropped_example.jpg")

from PIL import Image, ImageFilter
image = Image.open('cat.jpg')
# 2. DETAIL
detail_image = image.filter(ImageFilter.DETAIL)
detail_image.save('cat_detail.jpg')
display(detail_image)

from PIL import Image, ImageFilter
image = Image.open('cat.jpg')
edge_enhance_image = image.filter(ImageFilter.EDGE_ENHANCE)
edge_enhance_image.save('cat_edge_enhance.jpg')
display(edge_enhance_image)

from PIL import Image, ImageFilter
image = Image.open('cat.jpg')
edge_enhance_more_image = image.filter(ImageFilter.EDGE_ENHANCE_MORE)
edge_enhance_more_image.save('cat_edge_enhance_more.jpg')
display(edge_enhance_more_image)

from PIL import Image, ImageFilter
image = Image.open('cat.jpg')
find_edges_image = image.filter(ImageFilter.FIND_EDGES)
find_edges_image.save('cat_find_edges.jpg')
display(find_edges_image)

from PIL import Image, ImageFilter
image = Image.open('cat.jpg')
sharpen_image = image.filter(ImageFilter.SHARPEN)
sharpen_image.save('cat_sharpen.jpg')
display(sharpen_image)

from PIL import Image, ImageFilter
image = Image.open('cat.jpg')
smooth_image = image.filter(ImageFilter.SMOOTH)
smooth_image.save('cat_smooth.jpg')
display(smooth_image)

from PIL import Image, ImageFilter
image = Image.open('cat.jpg')
smooth_more_image = image.filter(ImageFilter.SMOOTH_MORE)
smooth_more_image.save('cat_smooth_more.jpg')
display(smooth_more_image)

import cv2
import matplotlib.pyplot as plt
img = cv2.imread('car.jpg')

# Convert BGR image to RGB for displaying with matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)
plt.axis('off')
plt.show()

import cv2
import matplotlib.pyplot as plt
img = cv2.imread('car1.jpg')

# Convert BGR image to RGB for displaying with matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)
plt.axis('off')
plt.show()

import cv2
import matplotlib.pyplot as plt
img = cv2.imread('logo.jpg')

# Convert BGR image to RGB for displaying with matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)
plt.axis('off')
plt.show()

import cv2
import matplotlib.pyplot as plt
img = cv2.imread('car3.jpg')

# Convert BGR image to RGB for displaying with matplotlib
img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

plt.imshow(img)
plt.axis('off')
plt.show()

import cv2
import numpy as np
img = cv2.imread('car.jpg')
# Convert the image to a NumPy array
img_array = np.array(img)

# Print the shape of the array
a=img_array.shape
b=img_array.size
print(a)
print(b)
print(img_array)

import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread('car.jpg')
# Convert the image to a NumPy array
img_array = np.array(img)
img_array1=img_array-20
img = cv2.cvtColor(img_array1, cv2.COLOR_BGR2RGB)#array to Image
plt.imshow(img)
plt.axis('off')
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread('car.jpg')
# Convert the image to a NumPy array
img_array = np.array(img)
img_array1=img_array*2
img = cv2.cvtColor(img_array1, cv2.COLOR_BGR2RGB)#array to Image
plt.imshow(img)
plt.axis('off')
plt.show()

import cv2
import numpy as np
import matplotlib.pyplot as plt

img = cv2.imread('logo.jpg')
# Convert the image to a NumPy array
img_array = np.array(img)
img_array1=img_array+50
img = cv2.cvtColor(img_array1, cv2.COLOR_BGR2RGB)#array to Image
plt.imshow(img)
plt.axis('off')
plt.show()

!pip install ultralytics

from ultralytics import YOLO
import cv2
import matplotlib.pyplot as plt
model = YOLO('yolov8n.pt')

results = model('/content/test.webp')

# Extract the first result (since we're processing one image)
result = results[0]

# Initialize a dictionary to count object occurrences
object_counts = {}

# Loop through each detected object
for box in result.boxes:
    class_index = int(box.cls.item())  # Class index
    class_name = result.names[class_index]  # Class name
    # Increment the count for the detected class
    object_counts[class_name] = object_counts.get(class_name, 0) + 1

# Create a summary string for the detections
a = ', '.join([f"{count} {name}" for name, count in object_counts.items()])

# Print the summary string
print(a)

print(a)

# Search for the word 'book'
if 'book' in a:
    print("The word 'book' is in the list.")
else:
    print("The word 'book' is not in the list.")

# Search for the word 'axe'
if 'axe' in a:
    print("The word 'axe' is in the list.")
else:
    print("The word 'axe' is not in the list.")

from ultralytics import YOLO
import cv2
import matplotlib.pyplot as plt
model = YOLO('yolov8n.pt')
# Perform inference on an image
results = model('img.jpg')

# Access the first result (if processing one image)
result = results[0]
result.plot()

!sudo apt-get update
!sudo apt-get install -y tesseract-ocr
!pip install pytesseract

pip install pytesseract opencv-python Pillow

import pytesseract
from PIL import Image
import cv2
import numpy as np

from google.colab import files
uploaded = files.upload()  # Upload an image file (e.g., 'test_image.jpg')

# Load the image using OpenCV
image_path = list(uploaded.keys())[0]
image = cv2.imread(image_path)

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Perform OCR using pytesseract
pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'  # Default location in Colab
text = pytesseract.image_to_string(gray, lang='eng')  # Change 'eng' to desired language
print("Detected Text:")
print(text)

import pytesseract
from PIL import Image
import cv2
import numpy as np

from google.colab import files
uploaded = files.upload()  # Upload an image file (e.g., 'test_image.jpg')

# Load the image using OpenCV
image_path = list(uploaded.keys())[0]
image = cv2.imread(image_path)

# Convert the image to grayscale
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Perform OCR using pytesseract
pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'  # Default location in Colab
text = pytesseract.image_to_string(gray, lang='eng')  # Change 'eng' to desired language
print("Detected Text:")
print(text)